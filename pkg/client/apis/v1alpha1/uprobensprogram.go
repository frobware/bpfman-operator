/*
Copyright 2023 The bpfman Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bpfman/bpfman-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UprobeNsProgramLister helps list UprobeNsPrograms.
// All objects returned here must be treated as read-only.
type UprobeNsProgramLister interface {
	// List lists all UprobeNsPrograms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UprobeNsProgram, err error)
	// UprobeNsPrograms returns an object that can list and get UprobeNsPrograms.
	UprobeNsPrograms(namespace string) UprobeNsProgramNamespaceLister
	UprobeNsProgramListerExpansion
}

// uprobeNsProgramLister implements the UprobeNsProgramLister interface.
type uprobeNsProgramLister struct {
	indexer cache.Indexer
}

// NewUprobeNsProgramLister returns a new UprobeNsProgramLister.
func NewUprobeNsProgramLister(indexer cache.Indexer) UprobeNsProgramLister {
	return &uprobeNsProgramLister{indexer: indexer}
}

// List lists all UprobeNsPrograms in the indexer.
func (s *uprobeNsProgramLister) List(selector labels.Selector) (ret []*v1alpha1.UprobeNsProgram, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UprobeNsProgram))
	})
	return ret, err
}

// UprobeNsPrograms returns an object that can list and get UprobeNsPrograms.
func (s *uprobeNsProgramLister) UprobeNsPrograms(namespace string) UprobeNsProgramNamespaceLister {
	return uprobeNsProgramNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UprobeNsProgramNamespaceLister helps list and get UprobeNsPrograms.
// All objects returned here must be treated as read-only.
type UprobeNsProgramNamespaceLister interface {
	// List lists all UprobeNsPrograms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UprobeNsProgram, err error)
	// Get retrieves the UprobeNsProgram from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UprobeNsProgram, error)
	UprobeNsProgramNamespaceListerExpansion
}

// uprobeNsProgramNamespaceLister implements the UprobeNsProgramNamespaceLister
// interface.
type uprobeNsProgramNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UprobeNsPrograms in the indexer for a given namespace.
func (s uprobeNsProgramNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UprobeNsProgram, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UprobeNsProgram))
	})
	return ret, err
}

// Get retrieves the UprobeNsProgram from the indexer for a given namespace and name.
func (s uprobeNsProgramNamespaceLister) Get(name string) (*v1alpha1.UprobeNsProgram, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("uprobensprogram"), name)
	}
	return obj.(*v1alpha1.UprobeNsProgram), nil
}
