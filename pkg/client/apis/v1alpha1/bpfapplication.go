/*
Copyright 2025 The bpfman Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bpfman/bpfman-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BpfApplicationLister helps list BpfApplications.
// All objects returned here must be treated as read-only.
type BpfApplicationLister interface {
	// List lists all BpfApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BpfApplication, err error)
	// BpfApplications returns an object that can list and get BpfApplications.
	BpfApplications(namespace string) BpfApplicationNamespaceLister
	BpfApplicationListerExpansion
}

// bpfApplicationLister implements the BpfApplicationLister interface.
type bpfApplicationLister struct {
	indexer cache.Indexer
}

// NewBpfApplicationLister returns a new BpfApplicationLister.
func NewBpfApplicationLister(indexer cache.Indexer) BpfApplicationLister {
	return &bpfApplicationLister{indexer: indexer}
}

// List lists all BpfApplications in the indexer.
func (s *bpfApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.BpfApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BpfApplication))
	})
	return ret, err
}

// BpfApplications returns an object that can list and get BpfApplications.
func (s *bpfApplicationLister) BpfApplications(namespace string) BpfApplicationNamespaceLister {
	return bpfApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BpfApplicationNamespaceLister helps list and get BpfApplications.
// All objects returned here must be treated as read-only.
type BpfApplicationNamespaceLister interface {
	// List lists all BpfApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BpfApplication, err error)
	// Get retrieves the BpfApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BpfApplication, error)
	BpfApplicationNamespaceListerExpansion
}

// bpfApplicationNamespaceLister implements the BpfApplicationNamespaceLister
// interface.
type bpfApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BpfApplications in the indexer for a given namespace.
func (s bpfApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BpfApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BpfApplication))
	})
	return ret, err
}

// Get retrieves the BpfApplication from the indexer for a given namespace and name.
func (s bpfApplicationNamespaceLister) Get(name string) (*v1alpha1.BpfApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bpfapplication"), name)
	}
	return obj.(*v1alpha1.BpfApplication), nil
}
