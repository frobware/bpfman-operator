/*
Copyright 2023 The bpfman Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bpfman/bpfman-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BpfNsApplicationLister helps list BpfNsApplications.
// All objects returned here must be treated as read-only.
type BpfNsApplicationLister interface {
	// List lists all BpfNsApplications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BpfNsApplication, err error)
	// BpfNsApplications returns an object that can list and get BpfNsApplications.
	BpfNsApplications(namespace string) BpfNsApplicationNamespaceLister
	BpfNsApplicationListerExpansion
}

// bpfNsApplicationLister implements the BpfNsApplicationLister interface.
type bpfNsApplicationLister struct {
	indexer cache.Indexer
}

// NewBpfNsApplicationLister returns a new BpfNsApplicationLister.
func NewBpfNsApplicationLister(indexer cache.Indexer) BpfNsApplicationLister {
	return &bpfNsApplicationLister{indexer: indexer}
}

// List lists all BpfNsApplications in the indexer.
func (s *bpfNsApplicationLister) List(selector labels.Selector) (ret []*v1alpha1.BpfNsApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BpfNsApplication))
	})
	return ret, err
}

// BpfNsApplications returns an object that can list and get BpfNsApplications.
func (s *bpfNsApplicationLister) BpfNsApplications(namespace string) BpfNsApplicationNamespaceLister {
	return bpfNsApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BpfNsApplicationNamespaceLister helps list and get BpfNsApplications.
// All objects returned here must be treated as read-only.
type BpfNsApplicationNamespaceLister interface {
	// List lists all BpfNsApplications in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BpfNsApplication, err error)
	// Get retrieves the BpfNsApplication from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BpfNsApplication, error)
	BpfNsApplicationNamespaceListerExpansion
}

// bpfNsApplicationNamespaceLister implements the BpfNsApplicationNamespaceLister
// interface.
type bpfNsApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BpfNsApplications in the indexer for a given namespace.
func (s bpfNsApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BpfNsApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BpfNsApplication))
	})
	return ret, err
}

// Get retrieves the BpfNsApplication from the indexer for a given namespace and name.
func (s bpfNsApplicationNamespaceLister) Get(name string) (*v1alpha1.BpfNsApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("bpfnsapplication"), name)
	}
	return obj.(*v1alpha1.BpfNsApplication), nil
}
