/*
Copyright 2023 The bpfman Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bpfman/bpfman-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// XdpNsProgramLister helps list XdpNsPrograms.
// All objects returned here must be treated as read-only.
type XdpNsProgramLister interface {
	// List lists all XdpNsPrograms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XdpNsProgram, err error)
	// XdpNsPrograms returns an object that can list and get XdpNsPrograms.
	XdpNsPrograms(namespace string) XdpNsProgramNamespaceLister
	XdpNsProgramListerExpansion
}

// xdpNsProgramLister implements the XdpNsProgramLister interface.
type xdpNsProgramLister struct {
	indexer cache.Indexer
}

// NewXdpNsProgramLister returns a new XdpNsProgramLister.
func NewXdpNsProgramLister(indexer cache.Indexer) XdpNsProgramLister {
	return &xdpNsProgramLister{indexer: indexer}
}

// List lists all XdpNsPrograms in the indexer.
func (s *xdpNsProgramLister) List(selector labels.Selector) (ret []*v1alpha1.XdpNsProgram, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XdpNsProgram))
	})
	return ret, err
}

// XdpNsPrograms returns an object that can list and get XdpNsPrograms.
func (s *xdpNsProgramLister) XdpNsPrograms(namespace string) XdpNsProgramNamespaceLister {
	return xdpNsProgramNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// XdpNsProgramNamespaceLister helps list and get XdpNsPrograms.
// All objects returned here must be treated as read-only.
type XdpNsProgramNamespaceLister interface {
	// List lists all XdpNsPrograms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.XdpNsProgram, err error)
	// Get retrieves the XdpNsProgram from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.XdpNsProgram, error)
	XdpNsProgramNamespaceListerExpansion
}

// xdpNsProgramNamespaceLister implements the XdpNsProgramNamespaceLister
// interface.
type xdpNsProgramNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all XdpNsPrograms in the indexer for a given namespace.
func (s xdpNsProgramNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.XdpNsProgram, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.XdpNsProgram))
	})
	return ret, err
}

// Get retrieves the XdpNsProgram from the indexer for a given namespace and name.
func (s xdpNsProgramNamespaceLister) Get(name string) (*v1alpha1.XdpNsProgram, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("xdpnsprogram"), name)
	}
	return obj.(*v1alpha1.XdpNsProgram), nil
}
