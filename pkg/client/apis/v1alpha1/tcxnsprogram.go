/*
Copyright 2023 The bpfman Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bpfman/bpfman-operator/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TcxNsProgramLister helps list TcxNsPrograms.
// All objects returned here must be treated as read-only.
type TcxNsProgramLister interface {
	// List lists all TcxNsPrograms in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TcxNsProgram, err error)
	// TcxNsPrograms returns an object that can list and get TcxNsPrograms.
	TcxNsPrograms(namespace string) TcxNsProgramNamespaceLister
	TcxNsProgramListerExpansion
}

// tcxNsProgramLister implements the TcxNsProgramLister interface.
type tcxNsProgramLister struct {
	indexer cache.Indexer
}

// NewTcxNsProgramLister returns a new TcxNsProgramLister.
func NewTcxNsProgramLister(indexer cache.Indexer) TcxNsProgramLister {
	return &tcxNsProgramLister{indexer: indexer}
}

// List lists all TcxNsPrograms in the indexer.
func (s *tcxNsProgramLister) List(selector labels.Selector) (ret []*v1alpha1.TcxNsProgram, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TcxNsProgram))
	})
	return ret, err
}

// TcxNsPrograms returns an object that can list and get TcxNsPrograms.
func (s *tcxNsProgramLister) TcxNsPrograms(namespace string) TcxNsProgramNamespaceLister {
	return tcxNsProgramNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TcxNsProgramNamespaceLister helps list and get TcxNsPrograms.
// All objects returned here must be treated as read-only.
type TcxNsProgramNamespaceLister interface {
	// List lists all TcxNsPrograms in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.TcxNsProgram, err error)
	// Get retrieves the TcxNsProgram from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.TcxNsProgram, error)
	TcxNsProgramNamespaceListerExpansion
}

// tcxNsProgramNamespaceLister implements the TcxNsProgramNamespaceLister
// interface.
type tcxNsProgramNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TcxNsPrograms in the indexer for a given namespace.
func (s tcxNsProgramNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TcxNsProgram, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TcxNsProgram))
	})
	return ret, err
}

// Get retrieves the TcxNsProgram from the indexer for a given namespace and name.
func (s tcxNsProgramNamespaceLister) Get(name string) (*v1alpha1.TcxNsProgram, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("tcxnsprogram"), name)
	}
	return obj.(*v1alpha1.TcxNsProgram), nil
}
